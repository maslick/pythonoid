AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Sample SAM Template for testing API Gateway, Lambda, DynamoDB integration

Globals:
  Api:
    OpenApiVersion: 3.0.1
  Function:
    Timeout: 5


Parameters:
    Environment:
      Type: String
      Default: dev

Resources:
  MyDatabase:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub demo.ContactArticleRecommendation.${Environment}
      KeySchema:
        - AttributeName: ContactId
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: ContactId
          AttributeType: S
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 15
        WriteCapacityUnits: 1
      Tags:
        - Key: "System"
          Value: "Test"
        - Key: "Application"
          Value: "e-commerce"

  MyBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Sub demo.contact.article.recommendation.${Environment}
      Tags:
        - Key: "System"
          Value: "Test"
        - Key: "Application"
          Value: "e-commerce"

  GetRecommendationsByIdFunctionDynamo:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/function1
      Handler: getArticlesById.lambda_handler
      Runtime: python3.7
      MemorySize: 3008
      Tracing: Active
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - DynamoDBReadPolicy:
            TableName:
              !Ref MyDatabase
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /getArticlesByIdDynamo
            Method: get
            RestApiId: !Ref API
      Environment:
        Variables:
          STAGE: !Sub ${Environment}

  GetRecommendationsByIdFunctionS3:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/function2
      Handler: getArticlesById.lambda_handler
      Runtime: python3.7
      MemorySize: 3008
      Tracing: Active
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - S3ReadPolicy:
            BucketName:
              !Ref MyBucket
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /getArticlesByIdS3
            Method: get
            RestApiId: !Ref API
      Environment:
        Variables:
          STAGE: !Sub ${Environment}

  API:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${AWS::StackName}
      StageName: !Sub ${Environment}
      TracingEnabled: true
      DefinitionBody:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: ./swagger-api.yml
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          LoggingLevel: INFO
          MetricsEnabled: true
          DataTraceEnabled: true
      AccessLogSetting:
        DestinationArn: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ApiAccessLogGroup}"
        Format: '$context.identity.sourceIp $context.authorizer.claims.sub [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.requestId $context.awsEndpointRequestId $context.xrayTraceId $context.responseLatency $context.integrationLatency "$context.error.message"'

  ApiGatewayPushToCloudWatchRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: "Push logs to CloudWatch logs from API Gateway"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

  ApiAccount:
    Type: "AWS::ApiGateway::Account"
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayPushToCloudWatchRole.Arn

  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/AccessLog-${API}"
      RetentionInDays: 7



Outputs:
  RecommendationsApi:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${API}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"